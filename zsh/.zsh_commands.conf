# Define a custom zle widget to execute 'ls -lah' only when no command is entered
function enter_behavior() {
    if [[ -z $BUFFER ]]; then
        if git rev-parse --is-inside-work-tree &>/dev/null; then
            git status
        else
            eza -lah --color=auto
        fi
        zle reset-prompt 
    else zle accept-line
    fi
}

# Bind the custom widget to the Enter key
zle -N enter_behavior
bindkey '^M' enter_behavior


check_dotfiles_changes() {
  local dotfiles_dir="$HOME/Configs/Dotfiles"
  local red="\e[31m"
  local yellow="\e[33m"
  local cyan="\e[36m"
  local bold="\e[1m"
  local reset="\e[0m"
  
  if [ ! -d "$dotfiles_dir" ]; then
    return
  fi

  # Check if we're in a git repo
  if ! git -C "$dotfiles_dir" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    return
  fi

  # Check for changes
  local changes
  changes=$(git -C "$dotfiles_dir" status --porcelain)
  
  # Check for unpushed commits
  local unpushed
  unpushed=$(git -C "$dotfiles_dir" cherry -v @{upstream} 2>/dev/null)

  if [ -n "$changes" ] || [ -n "$unpushed" ]; then
    echo -e "\n${bold}${red}ðŸš¨ DOTFILES ALERT! ðŸš¨${reset}"
    echo -e "${yellow}Uncommitted or unpushed changes in your Dotfiles!${reset}"
    
    if [ -n "$changes" ]; then
      echo -e "\n${cyan}ðŸ“¦ Uncommitted changes:${reset}"
      git -C "$dotfiles_dir" status -s
    fi

    if [ -n "$unpushed" ]; then
      echo -e "\n${cyan}ðŸš€ Unpushed commits:${reset}"
      git -C "$dotfiles_dir" cherry -v @{upstream}
    fi
    
    echo -e "\n${yellow}Run this command:${reset}"
    echo -e "  ${bold}cd ~/Dotfiles && git status${reset}\n"
  fi
}

# Run check at shell startup
check_dotfiles_changes
